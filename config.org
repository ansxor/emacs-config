#+TITLE: answer's Emacs Configuration
#+AUTHOR: Darien Reese

* Packages
#+BEGIN_SRC emacs-lisp
  ;; <leaf-install-code>
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
  ;; </leaf-install-code>
#+END_SRC

* Miscellaneous
** Remap Major Modes
#+BEGIN_SRC emacs-lisp
  ;; (setq major-mode-remap-alist
  ;; 		'((js2-mode js-ts-mode)))
#+END_SRC

* Appearance
** Remove Unnecessary UI Elements
#+BEGIN_SRC emacs-lisp
  (leaf cus-start
    :custom ((menu-bar-mode . nil)
	     (tool-bar-mode . nil)
	     (scroll-bar-mode . nil)))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "Terminus 12" nil t)
#+END_SRC

#+RESULTS:

** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'modus-vivendi t)
#+END_SRC

* Programming
** Eldoc Floating Window
#+BEGIN_SRC emacs-lisp
  (leaf eldoc-box
	 :ensure t
	 :config
	 (add-hook 'prog-mode 'eldoc-box-hover-mode)
	 (add-hook 'nim-mode-hook 'eldoc-box-hover-mode))
#+END_SRC

** Auto-Completion
#+BEGIN_SRC emacs-lisp
  (leaf company
	 :ensure t
	 :hook (prog-mode-hook))
#+END_SRC

** Languages
*** Nim
#+BEGIN_SRC emacs-lisp
  (leaf nim-mode
	 :ensure t
	 :config
	 (add-hook 'nim-mode-hook 'nimsuggest-mode))
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (leaf go-mode
    :ensure t
    :config
    (leaf go-eldoc
      :ensure t
      :hook (go-mode-hook)))
#+END_SRC

*** Vue
#+BEGIN_SRC emacs-lisp
  (leaf vue-mode
	 :ensure t)
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (leaf lsp-mode
	 :ensure t
	 :hook (go-mode nim-mode)
	 :commands (lsp lsp-deferred)
	 :init
	 (setq lsp-enable-symbol-highlighting nil
			 lsp-headerline-breadcrumb-enable nil))
#+END_SRC

#+RESULTS:
: lsp-mode

** Analysis
*** Flymake
#+BEGIN_SRC emacs-lisp
  (leaf flymake
    :disabled t
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook c-mode-hook))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (leaf flycheck
	 :doc "On-the-fly syntax checking"
	 :emacs>= 24.3
	 :ensure t
	 :bind (("M-n" . flycheck-next-error)
		("M-p" . flycheck-previous-error))
	 :custom ((flycheck-emacs-lisp-initialize-packages . t)
		  (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
	 :hook (emacs-lisp-mode-hook
		lisp-interaction-mode-hook
		c-mode-hook
		go-mode-hook
		nim-mode-hook))
#+END_SRC

** TreeSitter
#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
		  '((elisp "https://github.com/Wilfred/tree-sitter-elisp")
			 (go "https://github.com/tree-sitter/tree-sitter-go")
			 (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
			 (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
			 (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")))
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 3)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (leaf magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC
