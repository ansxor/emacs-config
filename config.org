#+TITLE: answer's Emacs Configuration
#+AUTHOR: Darien Reese

* Packages
#+BEGIN_SRC emacs-lisp
  ;; <leaf-install-code>
  (eval-and-compile
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless (package-installed-p 'leaf)
      (package-refresh-contents)
      (package-install 'leaf))

    (leaf leaf-keywords
      :ensure t
      :init
      ;; optional packages if you want to use :hydra, :el-get, :blackout,,,
      (leaf hydra :ensure t)
      (leaf el-get :ensure t)
      (leaf blackout :ensure t)

      :config
      ;; initialize leaf-keywords.el
      (leaf-keywords-init)))
  ;; </leaf-install-code>
#+END_SRC

** Add Local Load Path
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name (concat user-emacs-directory "code")))
#+END_SRC

* Miscellaneous
** Remap Major Modes
#+BEGIN_SRC emacs-lisp
  ;; (setq major-mode-'remap-alist
  ;; 		'((js2-mode js-ts-mode)))
#+END_SRC

** Discord Integration
#+BEGIN_SRC emacs-lisp
  (leaf elcord
	 :ensure t
	 :config
	 (elcord-mode))
#+END_SRC

** EVIL
#+BEGIN_SRC emacs-lisp
  (leaf evil
	 :disabled t
	 :ensure t
	 :custom ((evil-undo-system . 'undo-redo))
	 :config
	 (evil-mode 1))
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
  (leaf expand-region
	 :ensure t
	 :bind ("C-=" . er/expand-region))
#+END_SRC

** asdf integration
#+BEGIN_SRC emacs-lisp
  (leaf asdf
	 :ensure t
	 :vc (:url "https://github.com/tabfugnic/asdf.el")
	 :custom ((asdf-binary . answer-config/asdf-binary-location)))
#+END_SRC

** IEdit
#+BEGIN_SRC emacs-lisp
  (leaf iedit
	 :ensure t)
#+END_SRC

* Appearance
** Remove Unnecessary UI Elements
#+BEGIN_SRC emacs-lisp
  (leaf cus-start
    :custom ((menu-bar-mode . nil)
	     (tool-bar-mode . nil)
	     (scroll-bar-mode . nil)))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono 11" nil t)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
  (leaf moe-theme
	 :ensure t
	 :config
	 (load-theme 'moe-dark t))
  ;; (load-theme 'wombat t)
#+END_SRC

** Helm
#+BEGIN_SRC emacs-lisp
  (leaf helm
	 :ensure t
	 :bind (("M-x" . helm-M-x)
			  ("C-x C-f" . helm-find-files)
			  ("C-x b" . helm-mini)
			  ("M-s o" . helm-occur))
	 :config
	 (leaf helm-projectile
		:ensure t
		:config
		(helm-projectile-on)))
#+END_SRC

** Posframe
#+BEGIN_SRC emacs-lisp
  (leaf posframe
	 :ensure t)
#+END_SRC

* Programming
** Eldoc Floating Window
#+BEGIN_SRC emacs-lisp
  (leaf eldoc-box
	 :ensure t
	 :config
	 (add-hook 'prog-mode 'eldoc-box-hover-mode)
	 (add-hook 'nim-mode-hook 'eldoc-box-hover-mode))
#+END_SRC

** Auto-Completion
#+BEGIN_SRC emacs-lisp
  (leaf company
	 :ensure t
	 :hook (prog-mode-hook))
#+END_SRC

** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  (leaf rainbow-delimiters
	 :ensure t
	 :hook (prog-mode-hook))
#+END_SRC

** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
  (leaf highlight-indent-guides
	 :ensure t
	 :custom ((highlight-indent-guides-method . 'bitmap))
	 :hook (prog-mode-hook))
#+END_SRC

** Languages
*** HTML
#+BEGIN_SRC emacs-lisp
  (leaf web-mode
	 :disabled t
	 :ensure t
	 :mode "\\.p?html?\\'")
#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
  (leaf go-mode
    :ensure t
    :config
    (leaf go-eldoc
      :ensure t
      :hook (go-mode-hook)))
#+END_SRC

*** Vue
#+BEGIN_SRC emacs-lisp
  (leaf vue-mode
	 :ensure t)
#+END_SRC

** Electric Pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '((?\{ . ?\})
										(?\( . ?\))
										(?\[ . ?\])
										(?\" . ?\")))
  (electric-pair-mode t)
#+END_SRC

** LSP
#+BEGIN_SRC emacs-lisp
  (leaf lsp-mode
	 :ensure t
	 :hook (go-mode-hook nim-mode-hook typescript-ts-mode-hook)
	 :commands (lsp lsp-deferred)
	 :init
	 (setq lsp-enable-symbol-highlighting nil
			 lsp-headerline-breadcrumb-enable nil))
#+END_SRC

** Analysis
*** Flymake
#+BEGIN_SRC emacs-lisp
  (leaf flymake
    :disabled t
    :hook (emacs-lisp-mode-hook lisp-interaction-mode-hook c-mode-hook))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
  (leaf flycheck
	 :doc "On-the-fly syntax checking"
	 :emacs>= 24.3
	 :ensure t
	 :bind (("M-n" . flycheck-next-error)
		("M-p" . flycheck-previous-error))
	 :custom ((flycheck-emacs-lisp-initialize-packages . t)
		  (flycheck-disabled-checkers . '(emacs-lisp-checkdoc)))
	 :hook (emacs-lisp-mode-hook
		lisp-interaction-mode-hook
		c-mode-hook
		go-mode-hook
		nim-mode-hook
		ruby-ts-mode-hook))
#+END_SRC

** TreeSitter
#+BEGIN_SRC emacs-lisp
  (setq treesit-language-source-alist
		  '((elisp "https://github.com/Wilfred/tree-sitter-elisp")
			 (go "https://github.com/tree-sitter/tree-sitter-go")
			 (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
			 (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
			 (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
			 (ruby "https://github.com/tree-sitter/tree-sitter-ruby" "master" "src")))

  ;; (leaf treesit-auto
  ;;   :ensure t
  ;;   :config
  ;;   (global-treesit-auto-mode))
#+END_SRC

** Hyperbole
#+BEGIN_SRC emacs-lisp
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 3)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (leaf magit
    :ensure t
    :bind
    ("C-x g" . magit-status))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (leaf projectile
	 :ensure t
	 :leaf-defer nil
	 :bind ("C-c p" . projectile-command-map)
	 :custom ((projectile-mode . t)))
#+END_SRC

** Git Gutter
Displays symbols in the fringe to indicate what has changed
#+BEGIN_SRC emacs-lisp
  (leaf git-gutter
	 :ensure t
	 :hook (prog-mode-hook)
	 :config
	 (setq git-gutter:update-interval 0.02)
	 (leaf git-gutter-fringe
		:ensure t
		:config
		(define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
		(define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
		(define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom)))
#+END_SRC

** Copilot
#+BEGIN_SRC emacs-lisp
  (leaf copilot
	 :vc (:url "https://github.com/copilot-emacs/copilot.el")
	 :custom ((copilot-idle-delay . nil))
	 :config
	 (require 'copilot-posframe)
	 (add-hook 'copilot-mode-hook 'copilot-posframe-mode)
	 (bind-key (kbd "C-'") 'copilot-posframe-flow 'copilot-mode-map))
#+END_SRC

** Languages
*** Typescript
#+BEGIN_SRC emacs-lisp
  (leaf typescript-ts-mode
	 :mode "\\.ts\\'")
#+END_SRC

*** Nim
#+BEGIN_SRC emacs-lisp
  (leaf nim-mode
	 :ensure t)
#+END_SRC

*** Ruby
#+BEGIN_SRC emacs-lisp
  (leaf ruby-ts-mode
	 :mode "\\.rb\\'"
	 :config
	 ;; This is used for auto-completion and jumping into modules
	 (leaf robe
		:ensure t
		:hook (ruby-mode-hook ruby-ts-mode-hook)
		:config
		(push 'company-robe company-backends))
	 ;; This is used for linting Ruby programs
	 (leaf rubocop
		:ensure t
		:hook (ruby-mode-hook ruby-ts-mode-hook))
	 ;; Minitest interface
	 (leaf minitest
		:ensure t
		:hook (ruby-mode-hook ruby-ts-mode-hook))
	 ;; Ruby inferior mode
	 (leaf inf-ruby
		:ensure t
		:hook ((ruby-mode-hook ruby-ts-mode-hook). inf-ruby-minor-mode)))
#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
  (leaf yasnippet
	 :ensure t
	 :hook ((typescript-ts-mode-hook ruby-ts-mode-hook) . yas-minor-mode)
	 :config
	 (leaf yasnippet-snippets
		:ensure t))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (leaf dashboard
	 :ensure t
	 :custom ((dashboard-items . '((projects . 5)
											 (recents . 5)
											 (bookmarks . 5)
											 (agenda . 5))))
	 :config
	 (dashboard-setup-startup-hook))
#+END_SRC
